{
  "index.html": {
    "href": "index.html",
    "title": "Plateau Utils",
    "keywords": "Plateau Utils Plateau Utilsは、3D都市モデル（CityGML・3DTiles/MVT）をパースして、Pythonに読み込むためのPythonライブラリです。"
  },
  "manual/CONTRIBUTING.html": {
    "href": "manual/CONTRIBUTING.html",
    "title": "開発者向け情報",
    "keywords": "開発者向け情報 CityGMLのパーサーを拡充する CityGMLのパーサーを拡充する(パースする属性を増やす)には、ライブラリ内のparser/city_gml_parser.pyの_parseメソッドを修正します。 具体的には for city_object_member in city_object_members: のループ内で、以下のように属性を追加します。PR#62 try: # bldg:usageを取得 usage = city_object_member.find(\".//bldg:usage\", ns) # bldg:usageのdescriptionを取得 usage_xml_path = os.path.normpath( os.path.join(target, \"..\", \"../../codelists/Building_usage.xml\") ) usage_xml_root = ET.fromstring(zip_file.read(usage_xml_path)) usage_text = None for usage_xml_root_child in usage_xml_root.findall( \".//gml:dictionaryEntry\", ns ): gml_name = usage_xml_root_child.find(\".//gml:name\", ns) if str(gml_name.text) == str(usage.text): usage_text = str( usage_xml_root_child.find(\".//gml:description\", ns).text ) break except AttributeError: print(\"bldg:usage is NoneType in\", gid, \"in\", target) usage_text = None 上記の例ではtryブロック内でbldg:usageを取得し、そのdescriptionをcodelists/Building_usage.xmlから取得しています。 tryブロックを使うことで、bldg:usageが存在しない場合にエラーが発生することを防ぎます。 Plateauではファイルによって存在しない属性があるため、tryブロックを使うことでエラーを回避しています。 次に、usage_textをreturn_valueに追加します。 return_value = { \"gid\": gid, \"center\": None, \"min_height\": 10000, \"measured_height\": measured_height, \"building_structure_type\": building_structure_type_text, \"usage\": usage_text, } 最後にparseメソッド及びdownload_and_parseメソッドのAPIドキュメント部分を修正します。PR#65 Plataeuでは様々な属性が定義されているため、属性に応じて_parseメソッドを拡充していき、return_valueに属性を増やしていきます。 その際に気をつけるべきことは、属性値の属性の型及び多重度です。属性値の属性の型及び多重度は、Plateauのドキュメントに記載されています。 例えば、uro:realEstateIDOfBuildingはxs:string型であり、1の多重度を持ちます。 このケースでは、return_valueにはString型の値を追加しますが、Plateauのバージョンによっては属性が無いため、tryブロックを使ってエラーを回避します。 また、uro:realEstateIDOfBuildingUnitOwnershipはxs:string型であり、0..*の多重度を持ちます。 このケースでは、return_valueにはString型の配列を追加しますが、属性が存在しない場合でも必ず空の配列を返すようにします。 このように、属性値の属性の型及び多重度に応じて_parseメソッドを拡充していきます。 bldg:usageのように、gml:CodeTypeを参照する場合はcodelistsディレクトリ内のXMLファイルを参照してください。 コード整形について コード整形には、blackを利用しています。 Visual Studio Codeの場合はすでに設定されているため、特に追加設定は不要ですが、拡張機能 Black Formatter をインストールしておく必要があります。 なお、現状の設定では保存時に自動的にコード整形が行われます。 テストについて テストには、pytestを利用しています。 テストに使うデータは、ネットワーク通信を含めたテストの場合はインターネット上にデータを置きます。 その際、テストデータが肥大化しないように注意をしてください。 ローカルのテストデータの場合はtestsディレクトリ内に配置してください。 APIドキュメントについて APIドキュメントは、Sphinxを利用しています。 以下のコマンドでビルドできます。 cd doc make html ビルド後、doc/_build/html/index.htmlをブラウザで開くと、APIドキュメントが閲覧できます。 リリースについて リリースを行うにはまず、pyproject.tomlのversionを更新します。 次に、Release Tagを作成します。 git tag v0.0.15 git push --tags 次に、GitHub TagsからTagを選択し、Releaseを作成します。 Releaseを作成する際には、Generate release noteを選択して、Releaseを作成します。 最後に、PyPIにリリースをアップロードします。PyPIのアカウント及びアクセストークンが必要です。 python -m build python -m twine upload --repository plateauutils-test dist/* python -m twine upload --repository plateauutils dist/* PyPIにリリースをアップロードする際には、--repositoryオプションでplateauutils-testを指定することで、テストリリースをアップロードできます。"
  },
  "manual/devMan.html": {
    "href": "manual/devMan.html",
    "title": "環境構築手順書",
    "keywords": "環境構築手順書 1 本書について 本書では、Plateau Utils（以下「本ライブラリ」という。）の利用環境構築手順について記載しています。本システムの構成や仕様の詳細については以下も参考にしてください。 技術検証レポート 2 動作環境 本ライブラリの動作環境の一例として、Google Colaboratory（2024/02/01時点）を記載しています。 項目 GoogleColaboratoryでの動作環境（2024/02/01時点） 推奨環境 CPU コア数2，スレッド数4 同左 GPU Tesla K80 GPU等 同左 メモリ 12.7GB以上 同左 ネットワーク ネットワークからのダウンロード機能とRe:Earth CMSへのアップロード機能を使用しない場合はネットワーク環境は不要 ネットワークからのダウンロード機能とRe:Earth CMSへのアップロード機能を使用する場合、ネットワークを閲覧できる環境が必要 同左 3 インストール手順 pipコマンドにより、本ライブラリをインストールすることができます。 pip install git+https://github.com/eukarya-inc/plateauutils/ 仮想環境により、Pythonプロジェクトを開発するための手順は以下の通りです。 python3.9 -m venv venv source venv/bin/activate pip install -U pip pip install -r dev-requirements.txt pytest --cov=plateauutils --cov-report=html --cov-fail-under=90 ユーザーが改変して使う場合は、インストールしたライブラリ内の各スクリプトにコメントに記載の内容を参照の上修正してください。 各機能でどのスクリプトを呼び出ししているかは、利用手順マニュアルに記載しています。"
  },
  "manual/userMan.html": {
    "href": "manual/userMan.html",
    "title": "操作マニュアル",
    "keywords": "操作マニュアル 1 本書について 本書では、Plateau Utils（以下「本ライブラリ」という。）の利用手順について記載しています。 2 使い方 2-1 ライブラリの機能一覧 本ライブラリの機能は、以下の通りである。 機能名 内容 CityGML parser CityGMLのパーサー MVT parser MVTのパーサー Flood converter 浸水タイルをXYZタイル及び3DTilesに変換する機能 パーサーにより、以下の属性を抽出する。 名称 内容 gmlid id center 中心座標 min_height 最小高さ measured_height 測定高さ building_structure_type 建物構造種別(コード) usage 建物用途(コード) 3D都市モデルのバージョン1.4、1.5、2.0、3.0に対応 2-2 CityGML parser CityGMLのパーサーを利用するには、ライブラリ内のparser/city_gml_parser.pyよりCityGMLParserをインポートしてください。 3D都市モデルのCityGMLのZIPファイルのURLはG空間情報センターから取得できます。 以下はサンプルコードです。 >>> from shapely.geometry import Point >>> from plateauutils.mesh_geocorder.geo_to_mesh import point_to_meshcode >>> point = Point(139.71475, 35.70078) >>> mesh_code = point_to_meshcode(point, \"2/1\") >>> mesh_code '533945471' >>> from shapely import from_wkt >>> from plateauutils.parser.city_gml_parser import CityGMLParser >>> target_polygon = from_wkt(\"POLYGON ((130.41249721501615 33.224722548534864, 130.41249721501615 33.22506264293093, 130.41621606802997 33.22506264293093, 130.41621606802997 33.224722548534864, 130.41249721501615 33.224722548534864))\") >>> parser = CityGMLParser(target_polygon) >>> result = parser.download_and_parse(\"https://assets.cms.plateau.reearth.io/assets/d6/70821e-7f58-4f69-bc34-341875704e78/40203_kurume-shi_2020_citygml_3_op.zip\", \"/tmp\") >>> result [{'gid': 'bldg_383f1804-aa34-4634-949f-f769e09fa92d', 'center': [130.41263587199947, 33.22489181671553], 'min_height': 3.805999994277954, 'measured_height': 9.3, 'building_structure_type': '非木造'}, {'gid': 'bldg_877dea60-35d0-4fd9-8b02-852e39c75d81', 'center': [130.41619367090038, 33.22492719812357], 'min_height': 4.454999923706055, 'measured_height': 3.0, 'building_structure_type': '非木造'},...] 2-3 MVT parser MVTのパーサーを利用するには、ライブラリ内のparser/mvt_tile_parser.pyよりMvtTileParserをインポートしてください。 3D都市モデルの3D Tiles/MVTのZIPファイルのURLはG空間情報センターから取得できます。 以下はサンプルコードです。 >>> from plateauutils.parser.mvt_tile_parser import MvtTileParser >>> target_polygon = from_wkt(\"POLYGON ((130.525689 33.323966, 130.522728 33.314069, 130.511441 33.308653, 130.501013 33.30937, 130.492516 33.318516, 130.493717 33.325831, 130.504618 33.332249, 130.512857 33.332213, 130.525689 33.323966))\") >>> parser = MvtTileParser(target_polygon) >>> result = parser.download_and_parse(\"https://assets.cms.plateau.reearth.io/assets/43/53a0e1-cc14-4228-a5ef-19333a23596d/40203_kurume-shi_2020_3dtiles-mvt_3_op.zip\", \"/tmp\") >>> result ['/tmp/40203_kurume-shi_2020_3dtiles-mvt_3_op/luse/15/28254/13174.mvt'] 2-4 Flood converter 浸水タイルを3DTilesに変換する機能を利用するには、ライブラリ内のflood_converter/flood_to_3dtiles.pyよりFloodTo3dtilesをインポートしてください。 浸水タイルをXYZタイルに変換する機能を利用するには、ライブラリ内のflood_converter/flood_to_png.pyよりFloodToPngをインポートしてください。 以下はサンプルコードです。 >>> from plateauutils.flood_converter.flood_to_3dtiles import FloodTo3dtiles >>> f = FloodTo3dtiles() >>> f.convert('/tmp/floodmap_depth', '/tmp/depth_3dtiles') >>> from plateauutils.flood_converter.flood_to_png import FloodToPng >>> p = FloodToPng('/tmp/floodmap_depth') >>> p.parse('/tmp/depth_png')"
  }
}